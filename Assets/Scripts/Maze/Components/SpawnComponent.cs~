using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Events;
using Config;
using Cysharp.Threading.Tasks;
using DG.Tweening;
using Items;
using JetBrains.Annotations;
using Maze.Components;
using Maze.MazeService;
using UnityEngine;
using UnityEngine.EventSystems;
using Utils;
using Random = UnityEngine.Random;

namespace Services.CoreService
{
    [UsedImplicitly]
    public class ItemSpawnedEvent
    {
    }

    [UsedImplicitly]
    public class ItemBeginDrag
    {
    }

    [UsedImplicitly]
    public class ItemEndDrag
    {
    }

    public class SpawnComponent : MonoBehaviour, IComponent, IPointerDownHandler, IPointerUpHandler
    {
        [SerializeField] 
        private Transform _point;
    
        [SerializeField] 
        private ItemsConfig _itemsConfig;

        [SerializeField] 
        private PhysicsMaterial2D _defaultMaterial;
        
        [SerializeField] 
        private PhysicsMaterial2D _noBounceMaterial;

        [SerializeField] 
        private BoxCollider2D _collider2D;

        [SerializeField] 
        private RectTransform _rectTransform;

        public bool HasItem => _item != null;

        private bool _isDrag;
        private Item _item;
        private Context _context;

        private void FixedUpdate()
        {
            if(_context?.CanSpawn == false)
                return;
            
            if(_isDrag)
                DragItem();
        }

        private void EndDragItem()
        {
            _item.Rigidbody.gravityScale = 1;
            _item.Rigidbody.sharedMaterial = _defaultMaterial;
            _item.Rigidbody.velocity = Vector2.up;
            _item.Rigidbody.AddTorque(Random.Range(-0.5f, 0.5f), ForceMode2D.Impulse);
            _item.gameObject.layer = LayerMask.NameToLayer("Field");
            _context.Items.AddFirst(_item);
            
            _item = null;
            StartCoroutine(nameof(DelayedSpawn));

            Event<ItemEndDrag>.Publish();
        }

        public async UniTask<bool> ChangeItem()
        {
            if (_item == null)
                return false;

            var currentItemId = _item.Config.Id;

            _context.ItemsFactory.ReleaseItem(_item);
            await Spawn(currentItemId);
            return true;
        }

        private async UniTask Spawn(string excludeItemId = "")
        {
            if(_context.CanSpawn == false)
                return;

            var ids = new List<string>();
            ids.AddRange(_itemsConfig.Items.Where(x => x.UnlockedFromStart).Select(x => x.Id));
            ids.AddRange(_context.Items.Where(x=> x.Config.CanSpawn).Select(x=>x.Config.Id));
            
            if (excludeItemId != string.Empty)
            {
                ids.RemoveAll(x => x == excludeItemId);
            }

            // var randomId = ids.ToHashSet().GetRandomItem();
            var randomId = ids.GetRandomItem();
            var item = _context.ItemsFactory.GetItem(randomId);
            
            item.transform.position = _point.position;
            item.Rigidbody.gravityScale = 0;
            item.Rigidbody.sharedMaterial = _noBounceMaterial;
            item.gameObject.layer = LayerMask.NameToLayer("Default");

            var initialScale = new Vector3(item.Config.Size, item.Config.Size, item.Config.Size);
            item.transform.localScale = Vector3.zero;
            await item.transform.DOScale(initialScale, 0.5f).SetEase(Ease.OutBack);
            _item = item;
            
            Event<ItemSpawnedEvent>.Publish();
        }

        private void DragItem()
        {
            if(_item == null)
                return;

            var pos = Input.mousePosition;
            var worldPoint = (Vector2) Camera.main.ScreenToWorldPoint(pos);
            
            var position = _item.Rigidbody.position;
            var targetPoint = new Vector2(worldPoint.x, position.y);
            _item.Rigidbody.velocity = 20 * (targetPoint - position);
        }
        
        private IEnumerator Start()
        {
            _collider2D.size = _rectTransform.rect.size;
            _collider2D.offset = Vector2.zero;
            
            yield return DelayedSpawn();
        }

        private IEnumerator DelayedSpawn()
        {
            yield return new WaitForSeconds(1.5f);
            Spawn().Forget();
        }

        public void Dispose()
        {
        }

        public UniTask Initialize(Context context)
        {
            _context = context;
            return UniTask.CompletedTask;
        }
        
        public void OnPointerDown(PointerEventData eventData)
        {
            if(_context?.CanSpawn == false)
                return;
            
            if (_item == null)
                return;
            
            _isDrag = true;
            DragItem();
            Event<ItemBeginDrag>.Publish();
        }
        
        public void OnPointerUp(PointerEventData eventData)
        {
            if (_item == null || _isDrag == false)
                return;
            
            _isDrag = false;
            EndDragItem();
        }

        private void OnValidate()
        {
            _rectTransform = GetComponent<RectTransform>();
        }
    }
}
